---
layout:     post
title:      Update 6 - Continuous Bases
date:       2015-11-13 12:00:00
author:     Perry Ellis
tags: 	
---

<!-- Start Writing Below in Markdown -->

# What is this post?
This will cover how I determine the number of componenets to use when representing my microstructure using a continuous basis function  (rather than just the primative basis)

# Our bases
We use both the Legendre polynomials (to represent the degree of alignment) and a Fourier series.  The Legendre polynomial basis is already implremented in PyMKS. The Fourier basis is not yet integrated into the distributed PyMKS, but I have the most updated version (written by David) to use for my data.
The data are discretized such that $$ \frac{1}{\Delta} \integral_s m(h,x) dx = \sum_l m[l,s] \Zeta_l (h) $$, where $$m$$, $$h$$, $$s$$, and $$x$$ are the ususal variables to represent the microstate probability, the microstate itself, the discrete spatial bin, and the continuous spatial position, respectively. Here, $$l$$ represents the discrete local state, and $$\Zeta_l(h)$$ is the appropriate orthogonal basis function. In this way we recast the original state space into the state space of the orthogonal function basis where each value of $$l$$ corresponds to a state in the new basis.  For the degree of alignment we use the legendre polynomials, $$\Zeta_l (h)  = P_l (h) = \frac{1}{2^l l!} \frac{d^l}{dh^n} \left [  (h^2 -1)^l\right ]. For the orientation, we use a Fourier series, $$ \Zeta_l (h) = \exp(i*\frac{2*pi*l*h}{P})$$, where P is the periodicity of the data. In our case, P is $$\pi$$.

Note that for N states, the Legendre polynomials have $$l$$ range from $$0$$ to $$N-1$$ while for the Fourier series $$l$$ ranges from $$-(N-1)/2$$ to $$(N-1)/2$$.

# How many terms in the Fourier series do we need? 
First, let's take a look at the data in terms of the values for the different terms in the Fourier series. Starting in the upper left corner from from left to right we have the data as represented in the space of the  0th, 1st, 2nd, 2rd, 4th, and 5th positive Fourier component. Only ther real part is shown. The corresponding negative components have the same real part and so they are not shown. Note that the colorbar is accurate for all but the 0th component. That value is actually $$1$$, not $$0$$ as the color would have you believe. I have checked this independently - it is a visual error due to the way I'm plotting and I haven't changed it because I'm having some trouble getting matplotlib to do as I say.

![Example PCA](/MIC-Active-Nematics-Torus/img/post7/FourierBasis_Comps012345.PNG)

Physically, we interpret this space in terms of the spatial frequencies of the orientation data. This means that the 1st component is periodic on $$[0,180]$$ degrees, the 2nd component is periodic on $$[0,90]$$ degrees, the 4th component is periodic on $$[0,45]$$ degrees, etc.  Simply by looking at the data it's not obvious how many terms to keep. This also holds true when looking at even higher order terms.  Below are the real parts of the 6th, 7th, 8th, 9th, 10th, and 11th posititive Fourier components (again from left to right, starting at the upper left corner of the image).

![Example PCA](/MIC-Active-Nematics-Torus/img/post7/FourierBasis_Comps67891011.PNG)









